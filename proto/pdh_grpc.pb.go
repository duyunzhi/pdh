// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/pdh.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PdhServiceClient is the client API for PdhService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdhServiceClient interface {
	Transmit(ctx context.Context, opts ...grpc.CallOption) (PdhService_TransmitClient, error)
}

type pdhServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdhServiceClient(cc grpc.ClientConnInterface) PdhServiceClient {
	return &pdhServiceClient{cc}
}

func (c *pdhServiceClient) Transmit(ctx context.Context, opts ...grpc.CallOption) (PdhService_TransmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &PdhService_ServiceDesc.Streams[0], "/PdhService/Transmit", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdhServiceTransmitClient{stream}
	return x, nil
}

type PdhService_TransmitClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pdhServiceTransmitClient struct {
	grpc.ClientStream
}

func (x *pdhServiceTransmitClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pdhServiceTransmitClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdhServiceServer is the server API for PdhService service.
// All implementations must embed UnimplementedPdhServiceServer
// for forward compatibility
type PdhServiceServer interface {
	Transmit(PdhService_TransmitServer) error
	mustEmbedUnimplementedPdhServiceServer()
}

// UnimplementedPdhServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPdhServiceServer struct {
}

func (UnimplementedPdhServiceServer) Transmit(PdhService_TransmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedPdhServiceServer) mustEmbedUnimplementedPdhServiceServer() {}

// UnsafePdhServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdhServiceServer will
// result in compilation errors.
type UnsafePdhServiceServer interface {
	mustEmbedUnimplementedPdhServiceServer()
}

func RegisterPdhServiceServer(s grpc.ServiceRegistrar, srv PdhServiceServer) {
	s.RegisterService(&PdhService_ServiceDesc, srv)
}

func _PdhService_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PdhServiceServer).Transmit(&pdhServiceTransmitServer{stream})
}

type PdhService_TransmitServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pdhServiceTransmitServer struct {
	grpc.ServerStream
}

func (x *pdhServiceTransmitServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pdhServiceTransmitServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdhService_ServiceDesc is the grpc.ServiceDesc for PdhService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdhService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PdhService",
	HandlerType: (*PdhServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transmit",
			Handler:       _PdhService_Transmit_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/pdh.proto",
}
